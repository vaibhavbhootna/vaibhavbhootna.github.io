{"pages":[{"title":"JBoss Fuse Tutorials","text":"How to create Fabric in JBoss Fuse How to deploy a bundle in JBoss Fuse Fabric How to implement security in SOAP Webservice Deploy and Test a webservice using SOAP-UI","link":"/JBoss-Fuse-Tutorials-Videos/index.html"},{"title":"Contact","text":"Feel free to send your question and comments. NameEmailSubject Question Enquiry Feedback Want to write OtherMessage If you want to write for TutorialFlix, please share the link of your LinkedIn profile along with your topic of interest.","link":"/Contact/index.html"},{"title":"Videos","text":"Subscribe on Youtube","link":"/Videos/index.html"}],"posts":[{"title":"Create a Web Application with Spring 5","text":"OverviewThe tutorial illustrates how to Create a Web Application with Spring. We’ll look into the Spring Boot solution for creating the application. We’ll primarily use Java configuration in this tutorial. Pre-requisties JDK 1.8 Maven IDE (for ease of use) Creating Web app using Spring BootFirst, we’ll add the required dependencies and plugins in pom.xml We will use the dependencyManagement to define a standard version of an artifact to use across multiple projects. We will import version of artifacts defined in spring-boot-starter-parent. 1234567891011&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.3.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; Now we’ll add the spring-boot-starter-web dependency. Spring Boot Starter Web includes: spring-web module spring-webmvc module tomcat starter Spring-web &amp; Spring-webmvc are required for spring appplication while tomcat starter is required to run web application directly without explicitly installing any server. 123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; Spring Boot Maven Plugin provides Spring Boot support in Maven, letting you package executable jar or war archives and run an application “in-place”. 12345678&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; Creating a Spring Boot ApplicationCreate a class with main method. Annotate the class with @SpringBootApplication. Call the run method of SpringApplication class 123456789101112package com.tutorialflix.spring.web;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringBootWebApplication { public static void main(String[] args) { SpringApplication.run(SpringBootWebApplication.class, args); }} @SpringBootApplication includes the functionality of following annotations: @Configuration @EnableAutoConfiguration @ComponentScan. By default, it will perform the component scan in base package. So make sure SpringBootWebApplication class is present in the base package. Creating a Web ControllerCreate a class with a meaningful name based on your requirement &amp; annotate the class with @Controller. 123456789package com.tutorialflix.spring.web.contrroller;import org.springframework.stereotype.Controller;@Controllerpublic class MyWebController { } Create a method to accept requestsCreate a method named home to accept the request on ‘/‘ url and show the index.html 12345678910111213package com.tutorialflix.spring.web.contrroller;import org.springframework.stereotype.Controller;@Controllerpublic class MyWebController { @GetMapping(\"/\") public String home() { return \"index.html\"; }} Create a webpage to displayCreate a public folder inside resources folder of application and create a file named index.html. 12345&lt;html&gt; &lt;body&gt; &lt;h1&gt;Welcome to TutorialFlix.&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; Configure application using properties fileCreate a file application.properties inside resources folder of application and following properties. 12server.port=8081logging.level.org.springframework.web=DEBUG server.port : to change the default port 8080 to any other port number. logging.level.org.springframework.web : to change the log level default INFO to DEBUG Run the web application1$ mvn spring-boot:run TestGoto http://localhost:8081/","link":"/Create-a-Web-Application-with-Spring-5/"},{"title":"Developing REST Service using Spring Boot","text":"OverviewThe tutorial will show, how to develop a REST API with Spring. We’ll look into the Spring Boot solution for creating the application. We’ll primarily use Java configuration in this tutorial. Pre-requisties JDK 1.8 Maven IDE (for ease of use) Setup maven project Creat a maven project and add the required dependencies and plugins in pom.xml We will use the dependencyManagement to define a standard version of an artifact to use across multiple projects. We will allow spring-boot-starter-parent to manage the version of the artifacts. 1234567891011&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.3.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; Now we’ll add the spring-boot-starter-web dependency. Spring Boot Starter Web includes: spring-web module spring-webmvc module tomcat starter Spring-web &amp; Spring-webmvc are required for spring appplication while tomcat starter is required to run web application directly without explicitly installing any server. 123456&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; Spring Boot Maven Plugin provides Spring Boot support in Maven, letting you package executable jar or war archives and run an application “in-place”. 12345678&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; Creating a Spring Boot ApplicationCreate a class with main method. Annotate the class with @SpringBootApplication. Call the run method of SpringApplication class 123456789101112package com.tutorialflix.spring.web;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringBootWebApplication { public static void main(String[] args) { SpringApplication.run(SpringBootWebApplication.class, args); }} @SpringBootApplication includes the functionality of following annotations: @Configuration @EnableAutoConfiguration @ComponentScan. By default, it will perform the component scan in base package. So make sure SpringBootWebApplication class is present in the base package. Creating a REST ControllerCreate a class with a meaningful name based on your requirement &amp; annotate the class with @RestController. The @RestController is the central artifact in the entire Web Tier of the RESTful API. 123456789package com.tutorialflix.spring.web.contrroller;import org.springframework.stereotype.RestController;@RestControllerpublic class MyRestController { } Create a GET method to accept requestsCreate a method named home to accept the request on ‘/‘ url and show the index.html 123456@GetMapping(\"/sayHello\")public Map&lt;String,String&gt; sayHello() { Map map = new HashMap&lt;&gt;(); map.put(\"response\",\"Hello, how are you\"); return map; Create a POST method to accept requestsCreate a method named home to accept the request on ‘/‘ url and show the index.html 123456@PostMapping(\"/sayHelloWithName\")public Map&lt;String,String&gt; sayHelloWithName(Map&lt;String,String&gt; request) { Map map = new HashMap&lt;&gt;(); map.put(\"response\",\"Hello, how are you \" + request.get(\"name\")); return map;} Configuration using properties fileCreate a file application.properties inside resources folder of application and following properties. 12server.port=8081logging.level.org.springframework.web=DEBUG server.port : to change the default port 8080 to any other port number. logging.level.org.springframework.web : to change the log level default INFO to DEBUG Run the REST API1$ mvn spring-boot:run TestGoto http://localhost:8081/","link":"/Developing-REST-Service-using-Spring-Boot/"},{"title":"How to create a WSDL file","text":"IntroductionWSDL stands for Web Services Description Language. WSDL is used to describe web services and also known as Contract. It is the base building block to create a SOAP webservice in Contract-First Approach. Creation of WSDL consist of following: Schema Design WSDL Design In the below example, we are creating a WSDL which contain a single operation createCustomer. You can follow the similar approach to add more operation in the WSDL. Schema DesignFirst of all, we will create a schema file to define the request, response and fault structure. XML DefinitionCreate a file of .xsd extension, in this case we are using customer-service.xsd1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://service.customer.com/types/v1\"xmlns:tns=\"http://service.customer.com/types/v1\" elementFormDefault=\"qualified\"&gt; &lt;!-- Schema Content here --&gt; &lt;/xs:schema&gt; Request structure123456789101112131415&lt;xs:element name=\"createCustomerRequest\" type=\"tns:CreateCustomerRequest\" /&gt;&lt;xs:complexType name=\"CreateCustomerRequest\"&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerName\" type=\"xs:normalizedString\"/&gt; &lt;xs:element name=\"customerAge\" type=\"xs:int\" /&gt; &lt;xs:element name=\"customerPhoneNumber\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"10\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;/xs:sequence&gt;&lt;/xs:complexType&gt; Response structure123456&lt;xs:element name=\"createCustomerResponse\" type=\"tns:CreateCustomerResponse\" /&gt;&lt;xs:complexType name=\"CreateCustomerResponse\"&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerID\" type=\"xs:integer\" /&gt; &lt;/xs:sequence&gt;&lt;/xs:complexType&gt; Fault structure1234567&lt;xs:element name=\"createCustomerFault\" type=\"tns:CreateCustomerFault\" /&gt;&lt;xs:complexType name=\"CreateCustomerFault\"&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"errorMessage\" type=\"xs:normalizedString\" /&gt; &lt;xs:element name=\"errorCode\" type=\"xs:int\" /&gt; &lt;/xs:sequence&gt;&lt;/xs:complexType&gt; WSDL DesignDefinitionsCreate a file of .wsdl extension, in this case we are using customer-service.wsdl12345678&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;&lt;wsdl:definitions xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" name=\"customer-service\"xmlns:tns=\"http://service.customer.com/v1\"xmlns:cs=\"http://service.customer.com/types/v1\" targetNamespace=\"http://service.customer.com/v1\"&gt; &lt;/wsdl:definitions&gt; Schema ImportImport the schema which we have created in above example.12345&lt;wsdl:types&gt; &lt;xsd:schema&gt; &lt;xsd:import namespace=\"http://service.customer.com/types/v1\" schemaLocation=\"schemas/customer-service.xsd\"/&gt; &lt;/xsd:schema&gt;&lt;/wsdl:types&gt; MessagesDefines the data elements for each operation123456789&lt;wsdl:message name=\"createCustomerRequest\"&gt; &lt;wsdl:part name=\"createCustomerRequest\" element=\"cs:createCustomerRequest\"&gt;&lt;/wsdl:part&gt;&lt;/wsdl:message&gt;&lt;wsdl:message name=\"createCustomerResponse\"&gt; &lt;wsdl:part name=\"createCustomerResponse\" element=\"cs:createCustomerResponse\"&gt;&lt;/wsdl:part&gt;&lt;/wsdl:message&gt;&lt;wsdl:message name=\"createCustomerFault\"&gt; &lt;wsdl:part name=\"createCustomerFault\" element=\"cs:createCustomerFault\"&gt;&lt;/wsdl:part&gt;&lt;/wsdl:message&gt; PortTypeDescribes the operations that can be performed and the messages involved.1234567&lt;wsdl:portType name=\"CustomerServicePort\"&gt; &lt;wsdl:operation name=\"createCustomer\"&gt; &lt;wsdl:input message=\"tns:createCustomerRequest\" name=\"createCustomerRequest\" /&gt; &lt;wsdl:output message=\"tns:createCustomerResponse\" name=\"createCustomerResponse\" /&gt; &lt;wsdl:fault message=\"tns:createCustomerFault\" name=\"createCustomerFault\"&gt;&lt;/wsdl:fault&gt; &lt;/wsdl:operation&gt;&lt;/wsdl:portType&gt; BindingDefines the protocol and data format for each port type123456789101112131415&lt;wsdl:binding name=\"CustomerServiceBinding\" type=\"tns:CustomerServicePort\"&gt; &lt;soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\" /&gt; &lt;wsdl:operation name=\"createCustomer\"&gt; &lt;soap:operation soapAction=\"createCustomer\" style=\"document\" /&gt; &lt;wsdl:input name=\"createCustomerRequest\"&gt; &lt;soap:body use=\"literal\" /&gt; &lt;/wsdl:input&gt; &lt;wsdl:output name=\"createCustomerResponse\"&gt; &lt;soap:body use=\"literal\" /&gt; &lt;/wsdl:output&gt; &lt;wsdl:fault name=\"createCustomerFault\"&gt; &lt;soap:fault name=\"createCustomerFault\" use=\"literal\" /&gt; &lt;/wsdl:fault&gt; &lt;/wsdl:operation&gt;&lt;/wsdl:binding&gt; binding element has two attributes - name and type. The name attribute (you can use any name you want) defines the name of the binding, and the type attribute points to the port for the binding, in this case the “CustomerServicePort” port. soap:binding element has two attributes - style and transport. The style attribute can be “rpc” or “document”. In this case we use document. The transport attribute defines the SOAP protocol to use. In this case we use HTTP. operation element defines each operation that the portType exposes. For each operation the corresponding SOAP action has to be defined. You must also specify how the input and output are encoded. In this case we use “literal”. ServiceDefines the port and binding with the address where you want to expose your service. &lt;wsdl:service name=\"CustomerService\"&gt; &lt;wsdl:port name=\"CustomerServicePort\" binding=\"tns:CustomerServiceBinding\"&gt; &lt;soap:address location=\"http://0.0.0.0:8181/cxf/customerservice/v1\"/&gt; &lt;/wsdl:port&gt; &lt;/wsdl:service&gt; You can download the WSDL and XSD file for your reference","link":"/How-to-create-a-WSDL-file/"},{"title":"How to configure passwordless ssh and scp","text":"Create pair of private key and public keyOpen the terminal and then use ssh-keygen to generate the pair of keys By default system will generate the keys with name id_rsa &amp; id_rsa.pub. If you want to generate with custom name then enter the file name when it prompts. passphrase will act as password for your key to avoid misuse, you can keep it blank also. 12345678910111213141516171819202122$ ssh-keygen -t rsa**Generating public/private rsa key pair.Enter file in which to save the key (/home/author/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/author/.ssh/id_rsa.Your public key has been saved in /home/ec2-user/.ssh/id_rsa.pub.The key fingerprint is:SHA256:7B2G20AHF7PFHIACElEAzEO+i293wReZI49T7MMH1ns author@tutorialflixThe key&apos;s randomart image is:+---[RSA 2048]----+|=o==o. ..==o. ||.+ . . .o +o || .. o.+o || . .oXo. || . . OS+o. ||. . =.**o.E ||.. +ooo. || .. . . || ... . |+----[SHA256]-----+ Upload Your Public Key to Remote Linux ServerYou can upload the key using ssh-copy-id command, which is shipped by the openssh-client package. 123456789ssh-copy-id remote-user@server-ip**enter password**/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keysremote-user@server-ip&apos;s password:Number of key(s) added: 1Now try logging into the machine, with: &quot;ssh &apos;remote-user@server-ip&apos;&quot;and check to make sure that only the key(s) you wanted were added. The public key is stored in .ssh/authorized_keys file under the remote user’s home directory. Now ssh into the remote server and you will be able to login without password","link":"/How-to-configure-passwordless-ssh-and-scp/"},{"title":"How to create a maven project","text":"Steps Open Eclipse Click File / New / Maven Project Mark Create a Simple project option Enter the group id, artifact, version and press the Finish . Project Structure will be like below image. Video Tutorial","link":"/How-to-create-a-maven-project/"},{"title":"How to load property file in java","text":"OverviewApplication mostly require a file to store the configuration or data oustide the complied code. Most commonly used method is to store in properties file in the form of key value pair. In the below example. we’ll see how to read those properties file using Java. Java has in-built support in java.util.Properties class to perform read/write operations on the properties file. Properties fileconfig.properties12name=tutorialflixdescription=loading properties from file Reading properties file from classpath or resources folder12345678910111213141516171819202122232425262728package com.tutorialflix.example.properties.file;import java.io.IOException;import java.io.InputStream;import java.util.Properties;public class LoadPropertyFileFromClasspath { public static void main(String[] args) { try (InputStream input = LoadPropertyFileExample.class.getClassLoader().getResourceAsStream(\"config.properties\")) { Properties prop = new Properties(); // load a properties file prop.load(input); // get the property value and print it out System.out.println(prop.getProperty(\"name\")); System.out.println(prop.getProperty(\"description\")); } catch (IOException ex) { ex.printStackTrace(); } }} Reading properties file from disk123456789101112131415161718192021222324252627282930package com.tutorialflix.example.properties.file;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.Properties;public class LoadPropertyFileFromPath { public static void main(String[] args) { try (InputStream input = new FileInputStream(\"path/to/config.properties\")) { Properties prop = new Properties(); // load a properties file prop.load(input); // get the property value and print it out System.out.println(prop.getProperty(\"name\")); System.out.println(prop.getProperty(\"description\")); } catch (IOException ex) { ex.printStackTrace(); } }}","link":"/How-to-load-property-file-in-java/"},{"title":"How to install JDK 11 on mac using Homebrew","text":"Step 1. Install Homebrew (skip this step, if already installed) $ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot; Refer for more details https://brew.sh/ Step 2. Update HomeBrew and add the casks tap of HomeBrew. $ brew update $ brew tap homebrew/cask-versions Step 3. Install Version 11 of Java JDK. $ brew cask install java11 $ java --version ------------------------------------------------- openjdk 11.0.2 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode) ------------------------------------------------- Step 4. Install latest version of Java JDK. $ brew cask install java","link":"/How-to-install-JDK-11-on-mac-using-Homebrew/"},{"title":"SOAP -  Simple Object Access Protocol","text":"What is SOAP ?Simple Object Access Protocol is a messaging protocol specification for exchanging structured information. Its purpose is to provide extensibility, neutrality and independence. SOAP uses XML for its message format. SOAP relies on application layer protocols such as HTTP, SMTP, TCP, UDP, or JMS for message negotiation and transmission. SOAP consists of three parts an envelope, which defines the message structure and how to process it a set of encoding rules for expressing instances of application-defined datatypes a convention for representing procedure calls and responses SOAP building blocksA SOAP message is an ordinary XML document containing the following elements: Element Description Required Envelope Identifies the XML document as a SOAP message Yes Header Contains header information No Body Contains call, and response information Yes Fault Provides information about errors that occurred while processing the message No Request Format123456789101112131415&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v1=\"http://service.customer.com/types/v1\"&gt; &lt;soapenv:Header&gt; &lt;wsse:Security soapenv:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"&gt; &lt;wsse:UsernameToken wsu:Id=\"UsernameToken-F434D320D890F7CF1715251639631263\"&gt; &lt;wsse:Username&gt;admin&lt;/wsse:Username&gt; &lt;wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\"&gt;admin&lt;/wsse:Password&gt; &lt;/wsse:UsernameToken&gt; &lt;/wsse:Security&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body&gt; &lt;v1:deleteCustomerRequest&gt; &lt;v1:customerID&gt;123321&lt;/v1:customerID&gt; &lt;/v1:deleteCustomerRequest&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt; Response Format1234567&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:v1=\"http://service.customer.com/types/v1\"&gt; &lt;soapenv:Body&gt; &lt;v1:deleteCustomerResponse&gt; &lt;v1:message&gt;Customer Deleted Successfully&lt;/v1:message&gt; &lt;/v1:deleteCustomerResponse&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt; Fault Format123456789&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/1999/XMLSchema-instance\" xmlns:xsd==\"http://www.w3.org/1999/XMLSchema\"&gt; &lt;soapenv:Body&gt; &lt;soapenv:Fault&gt; &lt;faultcode xsi:type=\"xsd:string\"&gt;SOAP_FAULT_DELETECUSTOMER&lt;/faultcode&gt; &lt;faultstring xsi:type=\"xsd:string\"&gt;Customer not present&lt;/faultstring&gt; &lt;faultactor&gt;CustNotFound&lt;/faultactor&gt; &lt;/soapenv:Fault&gt; &lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;","link":"/SOAP/"},{"title":"How to remove files from Git commit","text":"Use the below command to change the position of HEAD of your branch. git reset --soft HEAD^ or git reset --soft HEAD~1 If you want to modify the content of the file. Edit the file directly. Alterantively if you want to remove the file from the commit then use below command. git reset HEAD path/to/unwanted_file Now commit again, you can even re-use the same commit message: git commit -c ORIG_HEAD","link":"/How-to-remove-files-from-Git-commit/"},{"title":"Migrate Spring Boot Service from JDK 1.8 to JDK 11 or higher","text":"Step 1. Install OpenJDK 11 and set the JAVA_HOME environment variable. Make sure you check the installed java version by using below mentioned command.1234$ java -version java version &quot;11.0.9&quot; 2020-10-20 LTSJava(TM) SE Runtime Environment 18.9 (build 11.0.9+7-LTS)Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.9+7-LTS, mixed mode) Step 2. Update the spring-boot version to the latest. In my case, I have update it to 2.3.3.RELEASE If you are using dependencyManagement use below mentioned code 1234567891011&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.3.3.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; If you are using parent pom then use below mentioned code 12345&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;&lt;/parent&gt; Step 3. Use maven-compiler plugin to compile the code with JDK 11/12 12345678910111213&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;11&lt;/source&gt; &lt;target&gt;11&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; Now if you try to build and run the project, you might get one of the below mentioned error java.lang.NoClassDefFoundError: javax/xml/ws/handler/soap/SOAPHandler or java.lang.TypeNotPresentException: Type javax.xml.ws.handler.Handler not present or java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException The reason why you are getting this error is because the JAXB APIs are considered to be Java EE APIs and therefore are no longer contained on the default classpath in Java SE 9. In Java 11, they are completely removed from the JDK. Refer this article for more details Step 4. To resolve this error, add the following dependencies in you pom.xml 1234567891011&lt;dependency&gt; &lt;groupId&gt;jakarta.xml.ws&lt;/groupId&gt; &lt;artifactId&gt;jakarta.xml.ws-api&lt;/artifactId&gt; &lt;version&gt;2.3.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;javax.xml.ws&lt;/groupId&gt; &lt;artifactId&gt;jaxws-api&lt;/artifactId&gt; &lt;version&gt;2.3.1&lt;/version&gt;&lt;/dependency&gt; Step 5. Run the command to build the project 1mvn clean install Now you should be able to run the project successfully. If you get any error, please comment below in the comment section.","link":"/Migrate-Spring-Boot-Service-from-JDK-1-8-to-JDK-11-or-higher/"},{"title":"Developing SOAP Web service using Apache CXF and Apache Camel","text":"OverviewIn this post, we will walk through the steps to develop a SOAP service using Java and we will also leverage Spring , Apache Camel &amp; Apache CXF. Pre-requisties1) JDK 1.8 for code development2) Maven for dependency management3) JBoss Fuse 6.3 for deployment Code DevelopmentMaven Project with required dependenciesCreate a maven project using IDE and add following dependencies in the pom.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.customer.service&lt;/groupId&gt; &lt;artifactId&gt;customer-service-impl&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;packaging&gt;bundle&lt;/packaging&gt; &lt;name&gt;Customer Service&lt;/name&gt; &lt;properties&gt; &lt;camel.version&gt;2.17.0&lt;/camel.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!-- Camel Dependency --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-core&lt;/artifactId&gt; &lt;version&gt;${camel.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-cxf&lt;/artifactId&gt; &lt;version&gt;${camel.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.camel&lt;/groupId&gt; &lt;artifactId&gt;camel-sql&lt;/artifactId&gt; &lt;version&gt;${camel.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.6.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;!-- For compliation of java code , you can specify the java version also --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.7&lt;/source&gt; &lt;target&gt;1.7&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;!-- For creating packing as bundle i.e. jar to bundle --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.felix&lt;/groupId&gt; &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt; &lt;extensions&gt;true&lt;/extensions&gt; &lt;version&gt;2.4.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt; &lt;artifactId&gt;cxf-codegen-plugin&lt;/artifactId&gt; &lt;version&gt;2.7.8&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;generate-sources&lt;/id&gt; &lt;phase&gt;generate-sources&lt;/phase&gt; &lt;configuration&gt; &lt;sourceRoot&gt;${basedir}/src/main/java&lt;/sourceRoot&gt; &lt;wsdlOptions&gt; &lt;wsdlOption&gt; &lt;wsdl&gt;${basedir}/src/main/resources/wsdl/customer-service.wsdl&lt;/wsdl&gt; &lt;/wsdlOption&gt; &lt;/wsdlOptions&gt; &lt;/configuration&gt; &lt;goals&gt; &lt;goal&gt;wsdl2java&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; About the components used in pom.xml maven-compiler-plugin used for compiling the project with specified JDK version maven-bundle-plugin used to create the packaging as bundle, to make it compatible for OSGI container cxf-codegen-plugin used to generate the java source file from the WSDL &amp; schema definition. Project structure WSDL &amp; SchemaDesigning SchemaYou can refer this post for detail discussion on designing schema Below is the schema which we will use in this examplesrc/main/resources/wsdl/customer-service.wsdl12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://service.customer.com/types/v1\" xmlns:tns=\"http://service.customer.com/types/v1\" elementFormDefault=\"qualified\"&gt; &lt;xs:element name=\"createCustomerRequest\" type=\"tns:CreateCustomerRequest\" /&gt; &lt;xs:element name=\"createCustomerResponse\" type=\"tns:CreateCustomerResponse\" /&gt; &lt;xs:element name=\"createCustomerFault\" type=\"tns:CreateCustomerFault\" /&gt; &lt;xs:complexType name=\"CreateCustomerRequest\"&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerName\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"50\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerAge\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:integer\" /&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerCity\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"50\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerPhoneNumber\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"10\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name=\"CreateCustomerResponse\"&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerID\" type=\"xs:integer\" /&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;xs:complexType name=\"CreateCustomerFault\"&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"errorMessage\" type=\"xs:normalizedString\" /&gt; &lt;xs:element name=\"errorCode\" type=\"xs:int\" /&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt;&lt;/xs:schema&gt; Designing WSDLYou can refer this post for detail discussion on designing wsdl. Below is the WSDL which we will use in this example src/main/resources/wsdl/customer-service.xsd12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:cs=\"http://service.customer.com/types/v1\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://service.customer.com/v1\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" name=\"customer-service\" targetNamespace=\"http://service.customer.com/v1\"&gt; &lt;wsdl:types&gt; &lt;xsd:schema&gt; &lt;xsd:import namespace=\"http://service.customer.com/types/v1\" schemaLocation=\"schemas/customer-service.xsd\" /&gt; &lt;/xsd:schema&gt; &lt;/wsdl:types&gt; &lt;wsdl:message name=\"createCustomerRequest\"&gt; &lt;wsdl:part name=\"createCustomerRequest\" element=\"cs:createCustomerRequest\" /&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name=\"createCustomerResponse\"&gt; &lt;wsdl:part name=\"createCustomerResponse\" element=\"cs:createCustomerResponse\" /&gt; &lt;/wsdl:message&gt; &lt;wsdl:message name=\"createCustomerFault\"&gt; &lt;wsdl:part name=\"createCustomerFault\" element=\"cs:createCustomerFault\" /&gt; &lt;/wsdl:message&gt; &lt;wsdl:portType name=\"CustomerServicePort\"&gt; &lt;wsdl:operation name=\"createCustomer\"&gt; &lt;wsdl:input message=\"tns:createCustomerRequest\" name=\"createCustomerRequest\" /&gt; &lt;wsdl:output message=\"tns:createCustomerResponse\" name=\"createCustomerResponse\" /&gt; &lt;wsdl:fault message=\"tns:createCustomerFault\" name=\"createCustomerFault\" /&gt; &lt;/wsdl:operation&gt; &lt;/wsdl:portType&gt; &lt;wsdl:binding name=\"CustomerServiceBinding\" type=\"tns:CustomerServicePort\"&gt; &lt;soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\" /&gt; &lt;wsdl:operation name=\"createCustomer\"&gt; &lt;soap:operation soapAction=\"createCustomer\" style=\"document\" /&gt; &lt;wsdl:input name=\"createCustomerRequest\"&gt; &lt;soap:body use=\"literal\" /&gt; &lt;/wsdl:input&gt; &lt;wsdl:output name=\"createCustomerResponse\"&gt; &lt;soap:body use=\"literal\" /&gt; &lt;/wsdl:output&gt; &lt;wsdl:fault name=\"createCustomerFault\"&gt; &lt;soap:fault name=\"createCustomerFault\" use=\"literal\" /&gt; &lt;/wsdl:fault&gt; &lt;/wsdl:operation&gt; &lt;/wsdl:binding&gt; &lt;wsdl:service name=\"CustomerService\"&gt; &lt;wsdl:port name=\"CustomerServicePort\" binding=\"tns:CustomerServiceBinding\"&gt; &lt;soap:address location=\"http://0.0.0.0:8181/cxf/customerservice/v1\" /&gt; &lt;/wsdl:port&gt; &lt;/wsdl:service&gt;&lt;/wsdl:definitions&gt; XML Based Spring configurationWe’ll use the xml based spring configuration for this example to expose the service. Define the CXF EndpointNow, we’ll define the CXF Endpoint to expose the service address specify the path where you want to expose your service serviceName &amp; endpointName should be same as specified in wsdl, wsdlURL relative to resources folder or it can a http url also. 123&lt;cxf:cxfEndpoint name=\"customerServiceCXF\" address=\"/customerservice\" endpointName=\"cs:CustomerServicePort\" serviceName=\"cs:CustomerService\" xmlns:cs=\"http://service.customer.com/v1\" wsdlURL=\"wsdl/customer-service.wsdl\"/&gt; Define the CamelContextAll the camel routes will be written in the camel context, so we will create a camelContext in the same file.123&lt;camel:camelContext&gt;&lt;-- Camel routes here --&gt;&lt;/camel:camelContext&gt; Define the dataFormatsWe will define the data format to convert the soap xml payload into java object and vice versa. Context path is the root folder where you have all the auto-generated classes (WSDL &amp; schema objects created using codegen-plugin) 123&lt;camel:dataFormats&gt; &lt;camel:jaxb id=\"customerJaxb\" contextPath=\"com.customer.service.types.v1\"/&gt;&lt;/camel:dataFormats&gt; Define the camel routeWe’ll define the camel route based on the logic, in this example route is pretty small &amp; simple, but trust me at enterprise level it can be bit complex and longer.123456&lt;camel:route id=\"customer-service-main-route\"&gt; &lt;camel:from uri=\"cxf:bean:customerServiceCXF?dataFormat=PAYLOAD\"/&gt; &lt;camel:unmarshal ref=\"customerJaxb\"/&gt; &lt;camel:process ref=\"customerResponseProcessor\"&gt;&lt;/camel:process&gt; &lt;camel:marshal ref=\"customerJaxb\"/&gt;&lt;/camel:route&gt; cxf component &amp; bean id is used to lookup the cxfEndpoint. camel:from will allow to consume the request(s) incoming the cxf endpoint. camel:unmarshal is used for converting soap payload to java objects camel:process is used for the logic to be performed in the service camel:marshal is used for converting java object to soap xml. This is how your routes file will look likesrc/main/resources/META-INF/spring/bundle-context-routes.xml1234567891011121314151617181920&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:camel=\"http://camel.apache.org/schema/spring\" xmlns:cxf=\"http://camel.apache.org/schema/cxf\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd\"&gt; &lt;cxf:cxfEndpoint name=\"customerServiceCXF\" address=\"/customerservice\" endpointName=\"cs:CustomerServicePort\" xmlns:cs=\"http://service.customer.com/v1\" serviceName=\"cs:CustomerService\" wsdlURL=\"wsdl/customer-service.wsdl\" /&gt; &lt;camel:camelContext&gt; &lt;camel:dataFormats&gt; &lt;camel:jaxb id=\"customerJaxb\" contextPath=\"com.customer.service.types.v1\"/&gt; &lt;/camel:dataFormats&gt; &lt;camel:route id=\"customer-service-main-route\"&gt; &lt;camel:from uri=\"cxf:bean:customerServiceCXF?dataFormat=PAYLOAD\"/&gt; &lt;camel:unmarshal ref=\"customerJaxb\"/&gt; &lt;camel:process ref=\"customerResponseProcessor\"&gt;&lt;/camel:process&gt; &lt;/camel:route&gt; &lt;/camel:camelContext&gt; &lt;bean id=\"customerResponseProcessor\" class=\"com.customer.service.processor.CustomerResponseProcessor\"/&gt; &lt;/beans&gt; Response ProcessorFor this example, we will write a processor which stores the employee data in map and return customer ID. Create CustomerResponseProcessor.java in src/main/resources12345678910111213141516171819202122232425262728293031323334353637package com.customer.service.processor;import java.math.BigInteger;import java.util.HashMap;import java.util.Map;import org.apache.camel.Exchange;import org.apache.camel.Processor;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.customer.service.types.v1.CreateCustomerRequest;import com.customer.service.types.v1.CreateCustomerResponse;public class CustomerRequestProcessor implements Processor { private static final Logger LOGGER = LoggerFactory.getLogger(CustomerRequestProcessor.class); private static long counter = 1; private static Map &lt; Long, CreateCustomerRequest &gt; customers = new HashMap(); @Override public void process(Exchange exchange) throws Exception { CreateCustomerRequest request = exchange.getIn().getBody(CreateCustomerRequest.class); customers.put(counter, request); synchronized(this) { counter++; } CreateCustomerResponse response = new CreateCustomerResponse(); response.setCustomerID(BigInteger.valueOf(counter)); LOGGER.debug(\"Employee stored in map ID: \" + counter); exchange.getOut().setBody(response); }} Code BuildNow we’ll compile the code &amp; package it as .jar using maven.1$ mvn clean install Deploy on JBoss FuseOnce we have the jar file ready with us, we’ll deploy it JBoss Fuse 6.3. You can refer this post to learn more about the deployments on JBoss Fuse.12$ cd fuse/bin$ ./fuse Run following command for the deployment JBossFuse:admin@root&gt; install -s mvn:com.customer.service/customer-service-impl/1.0.0 Now you can check the service url by visiting below urlhttp://localhost:8181/cxf","link":"/Developing-SOAP-Web-service-using-Apache-CXF-and-Apache-Camel/"},{"title":"How to create SOAP webservice using Spring-WS & Spring Boot","text":"OverviewIn this tutorial, we’ll see how to create a SOAP webservice using Spring-WS and Spring Boot. This post will focus only on pure Java based approach using annotations. Pre-requisties JDK 1.8 + Maven IDE ApproachSOAP services can be developed with two methods Contract First : Define WSDL and Schema before writing any code. Contract Last: Auto-generate the WSDL and schemas from the java classes. Spring-ws only supports the contract-first approach Project setupYou can clone this project from Github to kick start the project Create a maven project and add the following dependencies in the pom.xml 123456789101112131415161718192021&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.3.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;wsdl4j&lt;/groupId&gt; &lt;artifactId&gt;wsdl4j&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; Schema DesignContract first approach requires us to define the schema. And then we’ll use Spring-ws auto-generate WSDL out of the schema. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://spring.tutorialflix.com/types/v1\" xmlns:tns=\"http://spring.tutorialflix.com/types/v1\" elementFormDefault=\"qualified\"&gt; &lt;xs:element name=\"createCustomerRequest\"&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerName\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"50\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerAge\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:integer\" /&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerCity\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"50\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerPhoneNumber\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"10\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"createCustomerResponse\"&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerID\" type=\"xs:integer\" /&gt; &lt;xs:element name=\"details\" type=\"xs:string\" /&gt; &lt;xs:element name=\"status\" type=\"xs:string\" /&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"createCustomerFault\"&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"errorMessage\" type=\"xs:normalizedString\" /&gt; &lt;xs:element name=\"errorCode\" type=\"xs:int\" /&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt;&lt;/xs:schema&gt; Generate Java ClassesNow, we’ll jaxb2-maven-plugin to generate the java classes from the schema. Add the below plugin in your pom.xml 123456789101112131415161718&lt;plugin&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;jaxb2-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.6&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;xjc&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;xjc&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;schemaDirectory&gt;${project.basedir}/src/main/resources/&lt;/schemaDirectory&gt; &lt;outputDirectory&gt;${project.basedir}/src/main/java&lt;/outputDirectory&gt; &lt;clearOutputDir&gt;false&lt;/clearOutputDir&gt; &lt;/configuration&gt;&lt;/plugin&gt; schemaDirectory : location of the schema outputDirectory: where we want our java classes. clearOutputDir : making this true will delete the classes every time you compile the project Now, we’ll generate the classes by issuing a following maven command. $ mvn clean install Now you can see the auto-generated classes in you project folder. Setup EndpointNow, we’ll setup an endpoint in our Java code to serve the request. Create a class and annotate with @Endpoint 123456789101112131415161718192021222324252627package com.tutorialflix.spring.ws.endpoint;import java.math.BigInteger;import org.springframework.ws.server.endpoint.annotation.Endpoint;import org.springframework.ws.server.endpoint.annotation.PayloadRoot;import org.springframework.ws.server.endpoint.annotation.RequestPayload;import org.springframework.ws.server.endpoint.annotation.ResponsePayload;import com.tutorialflix.spring.types.v1.CreateCustomerRequest;import com.tutorialflix.spring.types.v1.CreateCustomerResponse;@Endpointpublic class CustomerServiceEndpoint { @ResponsePayload @PayloadRoot(localPart = \"createCustomerRequest\", namespace = \"http://spring.tutorialflix.com/types/v1\") public CreateCustomerResponse createCustomer(@RequestPayload CreateCustomerRequest request) { CreateCustomerResponse response = new CreateCustomerResponse(); response.setCustomerID(BigInteger.ONE); response.setDetails(request.getCustomerName() + \" \" + request.getCustomerCity() + \" \" + request.getCustomerPhoneNumber()); response.setStatus(\"SUCCESS\"); return response; }} For the purpose of this tutorial, I added very simple code to return a success response. @Endpoint: This indicates that this class is a web service endpoint @PayloadRoot: This indicates that incoming soap request for this method will have defined local part and namespace. It will basically try to match the RootElement of your xml message. @ResponsePayload: This indicates that method will return a payload. Configure Servlet Bean &amp; WSDL Definition Define the ServletRegistrationBean in configuration to register a servlet which will listen the incoming requests. Define the configuration for WSDL Definition 1234567891011121314151617181920212223242526272829303132333435363738394041package com.tutorialflix.spring.config;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;import org.springframework.ws.config.annotation.EnableWs;import org.springframework.ws.config.annotation.WsConfigurerAdapter;import org.springframework.ws.transport.http.MessageDispatcherServlet;import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;import org.springframework.xml.xsd.SimpleXsdSchema;import org.springframework.xml.xsd.XsdSchema;@EnableWs@Configurationpublic class WebServiceConfig extends WsConfigurerAdapter { @Bean public ServletRegistrationBean &lt; MessageDispatcherServlet &gt; messageDispatcherServlet(ApplicationContext applicationContext) { MessageDispatcherServlet servlet = new MessageDispatcherServlet(); servlet.setApplicationContext(applicationContext); servlet.setTransformWsdlLocations(true); return new ServletRegistrationBean &lt; &gt; (servlet, \"/ws/*\"); } @Bean(name = \"customer\") public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) { DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition(); wsdl11Definition.setPortTypeName(\"CustomerServicePort\"); wsdl11Definition.setLocationUri(\"/ws\"); wsdl11Definition.setTargetNamespace(\"http://spring.tutorialflix.com/service/v1\"); wsdl11Definition.setSchema(customerSchema()); return wsdl11Definition; } @Bean public XsdSchema customerSchema() { return new SimpleXsdSchema(new ClassPathResource(\"customer-service.xsd\")); }} portTypeName : Interface name locationUri : URL to expose service targetNamespace: Target name space for the WSDL elements schema: Location of the schema @Bean(name = “customer”) :Name of this bean will be used the wsdl name. Bootstrap as Spring Boot Application Add following plugin in pom.xml to make the jar spring boot compatible. 123456789101112 &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt;&lt;/plugin&gt;&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt; Define the main method which will allow this application to run using Spring Boot.This class should be in the root package always for the component scan. 123456789101112package com.tutorialflix.spring;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringBootSoapWebService { public static void main(String[] args) { SpringApplication.run(SpringBootSoapWebService.class, args); }} Deploy the service$ mvn spring-boot:run Now, you can see the WSDL at the following locationhttp://localhost:8080/ws/customer.wsdl Test the service Import the wsdl in SOAP-UI &amp; soap-ui will auto generate request structure for the request. Send request to service Download the codeYou can clone or download this project from Github","link":"/How-to-create-soap-webservice-using-spring-boot/"},{"title":"How to implement security in SOAP webservice using Spring-WS","text":"OverviewIn this tutorial, we’ll see how to implement security in SOAP webservice. Normally we use two types of security in SOAP webservice. 1) WS-Security using policies2) Basic Authentication For this tutorial, we’ll implement the policy based approach and all the configuration will be annoation-based. Pre-requisties JDK 1.8 + Maven IDE ApproachSOAP services can be developed with two methods Contract First : Define WSDL and Schema before writing any code. Contract Last: Auto-generate the WSDL and schemas from the java classes. Spring-ws only supports the contract-first approach Project setupYou can clone this project from Github to kick start the project Create a maven project and add the following dependencies in the pom.xml 123456789101112131415161718192021&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.1.3.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;wsdl4j&lt;/groupId&gt; &lt;artifactId&gt;wsdl4j&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; Schema DesignContract first approach requires us to define the schema. And then we’ll use Spring-ws auto-generate WSDL out of the schema. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://spring.tutorialflix.com/types/v1\" xmlns:tns=\"http://spring.tutorialflix.com/types/v1\" elementFormDefault=\"qualified\"&gt; &lt;xs:element name=\"createCustomerRequest\"&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerName\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"50\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerAge\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:integer\" /&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerCity\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"50\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"customerPhoneNumber\"&gt; &lt;xs:simpleType&gt; &lt;xs:restriction base=\"xs:string\"&gt; &lt;xs:maxLength value=\"10\" /&gt; &lt;xs:whiteSpace value=\"collapse\" /&gt; &lt;/xs:restriction&gt; &lt;/xs:simpleType&gt; &lt;/xs:element&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"createCustomerResponse\"&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"customerID\" type=\"xs:integer\" /&gt; &lt;xs:element name=\"details\" type=\"xs:string\" /&gt; &lt;xs:element name=\"status\" type=\"xs:string\" /&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt; &lt;xs:element name=\"createCustomerFault\"&gt; &lt;xs:complexType&gt; &lt;xs:sequence&gt; &lt;xs:element name=\"errorMessage\" type=\"xs:normalizedString\" /&gt; &lt;xs:element name=\"errorCode\" type=\"xs:int\" /&gt; &lt;/xs:sequence&gt; &lt;/xs:complexType&gt; &lt;/xs:element&gt;&lt;/xs:schema&gt; Generate Java ClassesNow, we’ll jaxb2-maven-plugin to generate the java classes from the schema. Add the below plugin in your pom.xml 123456789101112131415161718&lt;plugin&gt; &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt; &lt;artifactId&gt;jaxb2-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.6&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;xjc&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;xjc&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;schemaDirectory&gt;${project.basedir}/src/main/resources/&lt;/schemaDirectory&gt; &lt;outputDirectory&gt;${project.basedir}/src/main/java&lt;/outputDirectory&gt; &lt;clearOutputDir&gt;false&lt;/clearOutputDir&gt; &lt;/configuration&gt;&lt;/plugin&gt; schemaDirectory : location of the schema outputDirectory: where we want our java classes. clearOutputDir : making this true will delete the classes every time you compile the project Now, we’ll generate the classes by issuing a following maven command. $ mvn clean install Now you can see the auto-generated classes in you project folder. Setup EndpointNow, we’ll setup an endpoint in our Java code to serve the request. Create a class and annotate with @Endpoint 123456789101112131415161718192021222324252627package com.tutorialflix.spring.ws.endpoint;import java.math.BigInteger;import org.springframework.ws.server.endpoint.annotation.Endpoint;import org.springframework.ws.server.endpoint.annotation.PayloadRoot;import org.springframework.ws.server.endpoint.annotation.RequestPayload;import org.springframework.ws.server.endpoint.annotation.ResponsePayload;import com.tutorialflix.spring.types.v1.CreateCustomerRequest;import com.tutorialflix.spring.types.v1.CreateCustomerResponse;@Endpointpublic class CustomerServiceEndpoint { @ResponsePayload @PayloadRoot(localPart = \"createCustomerRequest\", namespace = \"http://spring.tutorialflix.com/types/v1\") public CreateCustomerResponse createCustomer(@RequestPayload CreateCustomerRequest request) { CreateCustomerResponse response = new CreateCustomerResponse(); response.setCustomerID(BigInteger.ONE); response.setDetails(request.getCustomerName() + \" \" + request.getCustomerCity() + \" \" + request.getCustomerPhoneNumber()); response.setStatus(\"SUCCESS\"); return response; }} For the purpose of this tutorial, I added very simple code to return a success response. @Endpoint: This indicates that this class is a web service endpoint @PayloadRoot: This indicates that incoming soap request for this method will have defined local part and namespace. It will basically try to match the RootElement of your xml message. @ResponsePayload: This indicates that method will return a payload. Configure Servlet Bean &amp; WSDL Definition Define the ServletRegistrationBean in configuration to register a servlet which will listen the incoming requests. Define the configuration for WSDL Definition 1234567891011121314151617181920212223242526272829303132333435363738394041package com.tutorialflix.spring.config;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;import org.springframework.ws.config.annotation.EnableWs;import org.springframework.ws.config.annotation.WsConfigurerAdapter;import org.springframework.ws.transport.http.MessageDispatcherServlet;import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;import org.springframework.xml.xsd.SimpleXsdSchema;import org.springframework.xml.xsd.XsdSchema;@EnableWs@Configurationpublic class WebServiceConfig extends WsConfigurerAdapter { @Bean public ServletRegistrationBean &lt; MessageDispatcherServlet &gt; messageDispatcherServlet(ApplicationContext applicationContext) { MessageDispatcherServlet servlet = new MessageDispatcherServlet(); servlet.setApplicationContext(applicationContext); servlet.setTransformWsdlLocations(true); return new ServletRegistrationBean &lt; &gt; (servlet, \"/ws/*\"); } @Bean(name = \"customer\") public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema countriesSchema) { DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition(); wsdl11Definition.setPortTypeName(\"CustomerServicePort\"); wsdl11Definition.setLocationUri(\"/ws\"); wsdl11Definition.setTargetNamespace(\"http://spring.tutorialflix.com/service/v1\"); wsdl11Definition.setSchema(customerSchema()); return wsdl11Definition; } @Bean public XsdSchema customerSchema() { return new SimpleXsdSchema(new ClassPathResource(\"customer-service.xsd\")); }} portTypeName : Interface name locationUri : URL to expose service targetNamespace: Target name space for the WSDL elements schema: Location of the schema @Bean(name = “customer”) :Name of this bean will be used the wsdl name. Configure Logging InterceptorsTo log the payload of our SOAP messages we’ll add the below beans in the WebServiceConfig class. 1234567891011@BeanPayloadLoggingInterceptor payloadLoggingInterceptor() { return new PayloadLoggingInterceptor();}@BeanPayloadValidatingInterceptor payloadValidatingInterceptor() { final PayloadValidatingInterceptor payloadValidatingInterceptor = new PayloadValidatingInterceptor(); payloadValidatingInterceptor.setSchema(new ClassPathResource(\"customer-service.xsd\")); return payloadValidatingInterceptor;} Configure Security Interceptors XwsSecurityInterceptor will intercept the request and validate the username &amp; password by the help of SimplePasswordValidationCallbackHandler. For this post we are using username = admin and password = pwd123. 1234567891011121314@BeanXwsSecurityInterceptor securityInterceptor() { XwsSecurityInterceptor securityInterceptor = new XwsSecurityInterceptor(); securityInterceptor.setCallbackHandler(callbackHandler()); securityInterceptor.setPolicyConfiguration(new ClassPathResource(\"securityPolicy.xml\")); return securityInterceptor;}@BeanSimplePasswordValidationCallbackHandler callbackHandler() { SimplePasswordValidationCallbackHandler callbackHandler = new SimplePasswordValidationCallbackHandler(); callbackHandler.setUsersMap(Collections.singletonMap(\"admin\", \"pwd123\")); return callbackHandler;} Add interceptor to the chain 123456@Overridepublic void addInterceptors(List&lt;EndpointInterceptor&gt; interceptors) { interceptors.add(payloadLoggingInterceptor()); interceptors.add(payloadValidatingInterceptor()); interceptors.add(securityInterceptor());} Adding the security policy Now create a file with name securityPolicy.xml in the resources folder and add the below mentioned configuration. 123&lt;xwss:SecurityConfiguration xmlns:xwss=\"http://java.sun.com/xml/ns/xwss/config\"&gt; &lt;xwss:RequireUsernameToken passwordDigestRequired=\"false\" nonceRequired=\"false\" /&gt;&lt;/xwss:SecurityConfiguration&gt; Bootstrap as Spring Boot ApplicationAdd following plugin in pom.xml to make the jar spring boot compatible. 123456789101112 &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt;&lt;/plugin&gt;&lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt; Define the main method which will allow this application to run using Spring Boot.This class should be in the root package always for the component scan. 123456789101112package com.tutorialflix.spring;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class SpringBootSoapWebService { public static void main(String[] args) { SpringApplication.run(SpringBootSoapWebService.class, args); }} Deploy the service$ mvn spring-boot:run Now, you can see the WSDL at the following locationhttp://localhost:8080/ws/customer.wsdl Test the service Import the wsdl in SOAP-UI &amp; soap-ui will auto generate request structure for the request. Send request to service Download the codeYou can clone or download this project from Github","link":"/How-to-implement-security-in-SOAP-webservice-using-Spring-WS/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Spring","slug":"Spring","link":"/tags/Spring/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"Rest","slug":"Rest","link":"/tags/Rest/"},{"name":"SOAP","slug":"SOAP","link":"/tags/SOAP/"},{"name":"Webservices","slug":"Webservices","link":"/tags/Webservices/"},{"name":"Middleware","slug":"Middleware","link":"/tags/Middleware/"},{"name":"WSDL","slug":"WSDL","link":"/tags/WSDL/"},{"name":"unix","slug":"unix","link":"/tags/unix/"},{"name":"Maven","slug":"Maven","link":"/tags/Maven/"},{"name":"installation","slug":"installation","link":"/tags/installation/"},{"name":"devops","slug":"devops","link":"/tags/devops/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"homebrew","slug":"homebrew","link":"/tags/homebrew/"},{"name":"brew","slug":"brew","link":"/tags/brew/"},{"name":"jdk","slug":"jdk","link":"/tags/jdk/"},{"name":"jdk11","slug":"jdk11","link":"/tags/jdk11/"},{"name":"GIT","slug":"GIT","link":"/tags/GIT/"},{"name":"Boot","slug":"Boot","link":"/tags/Boot/"},{"name":"Migration","slug":"Migration","link":"/tags/Migration/"},{"name":"JDK11","slug":"JDK11","link":"/tags/JDK11/"},{"name":"JDK8","slug":"JDK8","link":"/tags/JDK8/"},{"name":"Camel","slug":"Camel","link":"/tags/Camel/"},{"name":"CXF","slug":"CXF","link":"/tags/CXF/"},{"name":"Soap","slug":"Soap","link":"/tags/Soap/"},{"name":"Security","slug":"Security","link":"/tags/Security/"}],"categories":[{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"Webservices","slug":"Webservices","link":"/categories/Webservices/"},{"name":"Spring","slug":"Java/Spring","link":"/categories/Java/Spring/"},{"name":"Unix","slug":"Unix","link":"/categories/Unix/"},{"name":"Maven","slug":"Java/Maven","link":"/categories/Java/Maven/"},{"name":"Core","slug":"Java/Core","link":"/categories/Java/Core/"},{"name":"Installation","slug":"Installation","link":"/categories/Installation/"},{"name":"Soap","slug":"Webservices/Soap","link":"/categories/Webservices/Soap/"},{"name":"VCS","slug":"VCS","link":"/categories/VCS/"},{"name":"Boot","slug":"Java/Spring/Boot","link":"/categories/Java/Spring/Boot/"},{"name":"JDK","slug":"Installation/JDK","link":"/categories/Installation/JDK/"},{"name":"GIT","slug":"VCS/GIT","link":"/categories/VCS/GIT/"},{"name":"Web","slug":"Java/Spring/Boot/Web","link":"/categories/Java/Spring/Boot/Web/"},{"name":"Rest","slug":"Java/Spring/Boot/Rest","link":"/categories/Java/Spring/Boot/Rest/"},{"name":"Camel","slug":"Java/Spring/Camel","link":"/categories/Java/Spring/Camel/"},{"name":"Soap","slug":"Java/Spring/Boot/Soap","link":"/categories/Java/Spring/Boot/Soap/"},{"name":"Security","slug":"Java/Spring/Boot/Soap/Security","link":"/categories/Java/Spring/Boot/Soap/Security/"}]}